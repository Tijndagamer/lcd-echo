#!/usr/bin/python
"""
lcd-echo:
    This program uses my lcd-i2c.py module to write from the terminal directly
    to a simple character LCD.

    For more information, please refer to README.md

Copyright 2016 Tijndagamer

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from lcd_i2c import lcd_i2c
import argparse
from time import sleep

ADDRESS = 0x27
WIDTH = 16
MAX_LINES = 2
BACKLIGHT = True
CLEAR_TIME = 10
lcd = None

def read_config():
    global ADDRESS
    global WIDTH
    global MAX_LINES
    global BACKLIGHT
    global CLEAR_TIME
    with open("/etc/lcd-echo.conf", "r") as config_file:
        contents = config_file.read()
    contents_list = contents.split("\n")
    for line in contents_list:
        if line.startswith("address"):
            ADDRESS = int(line.split(" = ")[1], 0)
        elif line.startswith("width"):
            WIDTH = int(line.split(" = ")[1])
        elif line.startswith("max_lines"):
            MAX_LINES = int(line.split(" = ")[1])
        elif line.startswith("backlight"):
            if line.split(" = ")[1] == "True":
                BACKLIGHT = True
            else:
                BACKLIGHT = False
        elif line.startswith("clear_time"):
            CLEAR_TIME = int(line.split(" = ")[1])
        else:
            pass

    init()

def init():
    global lcd
    lcd = lcd-i2c(ADDRESS, WIDTH, MAX_LINES, BACKLIGHT)

def echo(msg):
    # Convert the list to one string
    msg = " ".join(msg)
    lcd.lcd_print(msg)

parser = argparse.ArgumentParser(description="Display a line of text on a simple character LCD screen")
parser.add_argument("-s", "--string", metavar='[STRING]', nargs='+', help="string to write to the LCD")
parser.add_argument("-c", "--clear", help="clear the lcd screen", action="store_true")
args = parser.parse_args()
if args.clear:
    read_config()
    lcd.lcd_clear()
else:
    read_config()
    echo(args.string)
